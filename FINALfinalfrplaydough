#More fun with playdough: Small Empty dataframe manipulations: 
library(tidyverse)
library(data.table)
library(matrixStats)
library(dplyr)
library(moments)

setwd("/Users/caroline/Desktop/srd_github")
#smallempty <- fread("FINALsmallempty.csv", header = TRUE)
realdf <- fread("FINALdensitydf.csv", header = TRUE)
#real df has the repeat i column as column 1

#run the same statistical analyses: 
realdf <- realdf %>% add_column(new_col = NA, .after=1)
colnames(realdf)[2] <- "Length of PSU"
realdf <- realdf %>% add_column(new_col = NA, .after=1)
colnames(realdf)[2] <- "Mean Density"
realdf <- realdf %>% add_column(new_col = NA, .after=1)
colnames(realdf) [2] <- "Standard Deviation"

#Mean: 
realdf$`Mean Density` <- rowMeans(realdf[ ,-c(1,5)], na.rm = T)
#SDS: 
realdf$`Standard Deviation` <- rowSds(as.matrix(realdf[, -c(1,5)]), na.rm = T)
na_smallempty <- !is.na(realdf)

#drop the first three columns 
na_smallempty <- na_smallempty[, -c(1:3)] %>% as.data.frame()
na_smallempty <- na_smallempty[, -2] 

#now count the number of true in each row via rowSums(df)
na_smallempty$`Length of PSU` <- rowSums(na_smallempty[, -1])
#input the length back into the original dataframe: 
realdf$`Length of PSU` <- na_smallempty$`Length of PSU` #length is done

realdf <- realdf %>% add_column(new_col = NA, .after =1)
colnames(realdf)[2] <- "IQR"
realdf <- realdf %>% add_column(new_col = NA, .after =1)
colnames(realdf)[2] <- "Median"
realdf <- realdf %>% add_column(new_col = NA, .after =1)
colnames(realdf)[2] <- "Skewedness"

realdf$IQR <- rowIQRs(as.matrix(realdf[ , -c(1,5,6,7,8)]), na.rm = TRUE)
realdf$Median <- rowMedians(as.matrix(realdf[ , -c(1,4,5,6,7,8)]), na.rm = TRUE)
realdf$Skewedness <- apply(realdf[ , -c(1,3,4,5,6,7,8)], 1, skewness, na.rm =TRUE) 
#all spread stats now loaded in 

#Matching up the skewness with the OR (higher OR = more SRD): First, match up the csv.s w/ their associated PSU
#Odds Ratios source from which dataframe again?
setwd("/Users/caroline/Desktop/srd_github")
PSU <- fread("PSUs.csv", header = TRUE)

setwd("/Users/caroline/Downloads/")
threeprimeutr <- fread("3'_UTRs.csv", header = TRUE) #3'utr contains all the stuff we need to match up the mRNA number to the csv, and then the mRNA number to the PSU dataframe

#rename the V1.12 column into mRNA number: 
colnames(realdf)[8] <- "mRNA Number"
smallemptyandPSU <- merge(PSU, realdf, by = "mRNA Number") #437 observations
#has 11226 observatins rn when re-run, why is it

#need to turn this into a csv.
write.csv(realandPSU, "/Users/caroline/Desktop/srd_github/realandPSU.csv", row.names = FALSE)

#well. I still matched up 451 observations, and now I need to match the utrs to a specific gene
#next step: Find the UTRs connected to the same gene, find the median of their UTR expression/stat and assign it to the gene

#For gene names that are the exact same, take the median of the medians of the density analysis for those different UTRs and assign them all to that
#one gene name: 

#for median: 
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(median = median(Median)) %>%
  select(`Gene Name`, Median, `WT/KO`) %>%
  unique() -> duplicateremovedmed

ggplot(duplicateremovedmed, aes(x = Median, y = `WT/KO`)) +
  geom_point(alpha=0.5) + 
  geom_hline(yintercept=1.2)

#for IQR: 
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(IQR = mean(IQR)) %>%
  select(`Gene Name`, IQR, `WT/KO`) %>%
  unique() -> duplicateremovediqr

ggplot(duplicateremovediqr, aes(x = IQR, y = `WT/KO`)) +
  geom_point(alpha = 0.5) + 
  geom_hline(yintercept=1.2) #no <3, shifted over more on the x-axis

#mean density: 
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(mean = mean(`Mean Density`)) %>%
  select(`Gene Name`,`Mean Density`, `WT/KO`) %>%
  unique() -> duplicateremovedmean

ggplot(duplicateremovedmean, aes(x = `Mean Density`, y = `WT/KO`)) +
  geom_point(alpha = 0.5) + 
  geom_hline(yintercept=1.2) #kinda! similar to the reference

#by standard deviation: 
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(sd = median(`Standard Deviation`)) %>%
  select(`Gene Name`,`Standard Deviation`, `WT/KO`) %>%
  unique() -> duplicateremovedsd

ggplot(duplicateremovedsd, aes(x = `Standard Deviation`, y = `WT/KO`)) +
  geom_point(alpha = 0.5) + 
  geom_hline(yintercept=1.2) #similar to the mean 

#by GC content for fun!
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(gc = mean(`GC Percentage`)) %>%
  select(`Gene Name`,`GC Percentage`, `WT/KO`) %>%
  unique() -> duplicateremovedgc

ggplot(duplicateremovedgc, aes(x = `GC Percentage`, y = `WT/KO`)) +
  geom_point(alpha = 0.5) + 
  geom_hline(yintercept=1.2) #interesting, but more like a blob than anything else.

#############################################
library(dplyr)
library(tidyverse)
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(dG = median(`Delta G per Nucleotide`)) %>%
  select(`Gene Name`, dG, `WT/KO`) %>%
  unique() -> duplicateremoved

ggplot(duplicateremoved, aes(x = -dG, y = `WT/KO`)) +
  geom_point(alpha = 0.5) + 
  geom_hline(yintercept=1.2) #his was our reference

#############################################
#Delta G and Median: 
smallemptyandPSU %>% group_by(`Gene Name`) %>% 
  mutate(dG = median(`Delta G per Nucleotide`)) %>%
  mutate(median = median(Median)) %>%
  select(`Gene Name`, dG, `WT/KO`, Median) %>%
  unique() -> duplicateremovedwow
  
ggplot(duplicateremovedwow, aes(x = -dG, y = `Median`)) +
  geom_point() 
##############################################
#since none of our statistical findings are amazing indicators
#we can potentially use AUC (Area Under the Curve) models to find the most predictive power model
#just gonna go ahead and start with the duplicate removed median

#step 1: make some glm models for the duplicate removed median 
install.packages("pROC")
library(pROC)
model <- lm(`Median` ~ `WT/KO`, 
                         data = duplicateremovedmed[1:2438,])

#70% to make the model, 30% tested, there are 4876 variables
#therefore, our model data set = 3413, test data set is 1463
predicted <- predict(model, duplicateremovedmed[2439:4876,], type = "response")
auc(duplicateremovedmed[2439:4876,]$Median, predicted) #auc value of 0.71 for median, for WTKO = 1

#attempting to use the RSS terms to measure how good these different models are:

#MEDIAN
install.packages('qpcR')
library(qpcR)
model <- lm(`Median` ~ `WT/KO`, 
            data = duplicateremovedmed)
RSS(model) #this function??

resids <- residuals(lm(`Median` ~ `WT/KO`, data = duplicateremovedmed))
duplicateremovedmed <- duplicateremovedmed %>% add_column(new_col = NA, .after=3)
colnames(duplicateremovedmed)[4] <- "Residuals"
duplicateremovedmed$Residuals <- resids
duplicateremovedmed <- duplicateremovedmed %>% add_column(new_col = NA, .after=4)
colnames(duplicateremovedmed)[5] <- "Resid Squared"
duplicateremovedmed$`Resid Squared` <- (duplicateremovedmed$Residuals)^2
RSS_median <- sum(duplicateremovedmed$`Resid Squared`) #50.03304
#the better the model, the smaller the residual sum of squares RIP HAHAH

#MEAN: 
resids <- residuals(lm(`Mean Density` ~ `WT/KO`, data = duplicateremovedmean))
duplicateremovedmean <- duplicateremovedmean %>% add_column(new_col = NA, .after=3)
colnames(duplicateremovedmean)[4] <- "Residuals"
duplicateremovedmean$Residuals <- resids
duplicateremovedmean <- duplicateremovedmean %>% add_column(new_col = NA, .after=4)
colnames(duplicateremovedmean)[5] <- "Resid Squared"
duplicateremovedmean$`Resid Squared` <- (duplicateremovedmean$Residuals)^2
RSS_mean <- sum(duplicateremovedmean$`Resid Squared`) #22.7639

#STDEV 
resids <- residuals(lm(`Standard Deviation` ~ `WT/KO`, data = duplicateremovedsd))
duplicateremovedsd <- duplicateremovedsd %>% add_column(new_col = NA, .after=3)
colnames(duplicateremovedsd)[4] <- "Residuals"
duplicateremovedsd$Residuals <- resids
duplicateremovedsd <- duplicateremovedsd %>% add_column(new_col = NA, .after=4)
colnames(duplicateremovedsd)[5] <- "Resid Squared"
duplicateremovedsd$`Resid Squared` <- (duplicateremovedsd$Residuals)^2
RSS_sd <- sum(duplicateremovedsd$`Resid Squared`) #8.794

#IQR: 
resids <- residuals(lm(`IQR` ~ `WT/KO`, data = duplicateremovediqr))
duplicateremovediqr <- duplicateremovediqr %>% add_column(new_col = NA, .after=3)
colnames(duplicateremovediqr)[4] <- "Residuals"
duplicateremovediqr$Residuals <- resids
duplicateremovediqr <- duplicateremovediqr %>% add_column(new_col = NA, .after=4)
colnames(duplicateremovediqr)[5] <- "Resid Squared"
duplicateremovediqr$`Resid Squared` <- (duplicateremovediqr$Residuals)^2
RSS_iqr <- sum(duplicateremovediqr$`Resid Squared`) #49.033

#Delta G: REFERENCE 
resids <- residuals(lm(`dG` ~ `WT/KO`, data = duplicateremoved))
duplicateremoved <- duplicateremoved %>% add_column(new_col = NA, .after=3)
colnames(duplicateremoved)[4] <- "Residuals"
duplicateremoved$Residuals <- resids
duplicateremoved <- duplicateremoved %>% add_column(new_col = NA, .after=4)
colnames(duplicateremoved)[5] <- "Resid Squared"
duplicateremoved$`Resid Squared` <- (duplicateremoved$Residuals)^2
RSS_ref <- sum(duplicateremoved$`Resid Squared`) #6.227
